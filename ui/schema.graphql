type Appointment {
  manuscriptIdentifier: String!
  type: AppointmentType!
  waitingFor: AppointmentType
}

enum AppointmentType {
  FirstXmlReview
  SecondXmlReview
  TransliterationReview
  XmlConversion
}

type DocumentInPipeline {
  appointedFirstXmlReviewer: String
  appointedSecondXmlReviewer: String
  appointedTransliterationReviewer: String
  appointedXmlConverter: String
  approvalDateString: String
  author: String!
  firstXmlReviewDateString: String
  manuscriptIdentifier: String!
  secondXmlReviewDateString: String
  transliterationReviewDateString: String
  xmlConversionDateString: String
}

type ExecutiveEditor {
  allReviewers: [String!]!
  documentAwaitingApproval(mainIdentifier: String!): String
  documentsAwaitingApproval: [String!]!
  documentsInPipeline(page: Int): [DocumentInPipeline!]!
  documentsInPipelineCount: Int!
  userCount: Int!
  users(page: Int!): [User!]!
}

type ExecutiveEditorMutations {
  appointFirstXmlReviewer(manuscriptIdentifier: String!, reviewer: String!): String!
  appointSecondXmlReviewer(manuscriptIdentifier: String!, reviewer: String!): String!
  appointTransliterationReviewer(manuscriptIdentifier: String!, reviewer: String!): String!
  appointXmlConverter(converter: String!, manuscriptIdentifier: String!): String!
  submitApproval(input: String!, manuscriptIdentifier: String!): Boolean!
  updateUserRights(newRights: Rights!, username: String!): Rights!
}

type LoggedInUserMutations {
  createManuscript(values: ManuscriptMetaDataInput): String!
  manuscript(mainIdentifier: String!): ManuscriptMutations
}

type ManuscriptIdentifier {
  identifier: String!
  identifierType: ManuscriptIdentifierType!
}

input ManuscriptIdentifierInput {
  identifier: String!
  identifierType: ManuscriptIdentifierType!
}

enum ManuscriptIdentifierType {
  CollectionNumber
  ExcavationNumber
  PublicationShortReference
}

enum ManuscriptLanguageAbbreviations {
  Akk
  Hat
  Hit
  Hur
  Luw
  Pal
  Sum
}

type ManuscriptMetaData {
  bibliography: String
  creatorUsername: String!
  cthClassification: Int
  defaultLanguage: ManuscriptLanguageAbbreviations!
  mainIdentifier: ManuscriptIdentifier!
  otherIdentifiers: [ManuscriptIdentifier!]!
  palaeographicClassification: PalaeographicClassification!
  palaeographicClassificationSure: Boolean!
  pictureUrls: [String!]!
  provenance: String
  provisionalTransliteration: String
  status: ManuscriptStatus!
  transliterationReleased: Boolean!
  transliterationReviewData: String
  xmlConversion: String
}

input ManuscriptMetaDataInput {
  bibliography: String
  cthClassification: Int
  defaultLanguage: ManuscriptLanguageAbbreviations!
  mainIdentifier: ManuscriptIdentifierInput!
  otherIdentifiers: [ManuscriptIdentifierInput!]!
  palaeographicClassification: PalaeographicClassification!
  palaeographicClassificationSure: Boolean!
  provenance: String
}

type ManuscriptMutations {
  releaseTransliteration: String!
  updateTransliteration(input: String!): Boolean!
}

enum ManuscriptStatus {
  Approved
  Created
  FirstXmlReviewPerformed
  SecondXmlReviewPerformed
  TransliterationReleased
  TransliterationReviewPerformed
  XmlConversionPerformed
}

type Mutation {
  executiveEditor: ExecutiveEditorMutations
  login(password: String!, username: String!): String
  me: LoggedInUserMutations
  register(userInput: UserInput!): String
  reviewerMutations: ReviewerMutations
}

enum PalaeographicClassification {
  AssyroMittanianScript
  LateNewScript
  MiddleAssyrianScript
  MiddleBabylonianScript
  MiddleScript
  NewScript
  OldAssyrianScript
  OldScript
  Unclassified
}

type Query {
  allManuscripts(page: Int!): [ManuscriptMetaData!]!
  executiveEditorQueries: ExecutiveEditor
  manuscript(mainIdentifier: String!): ManuscriptMetaData
  manuscriptCount: Int!
  myManuscripts: [String!]
  reviewerQueries: Reviewer
}

type Reviewer {
  appointments: [Appointment!]!
  xmlReview(mainIdentifier: String!, reviewType: XmlReviewType!): String
}

type ReviewerMutations {
  submitTransliterationReview(mainIdentifier: String!, review: String!): Boolean!
  submitXmlConversion(conversion: String!, mainIdentifier: String!): Boolean!
  submitXmlReview(mainIdentifier: String!, review: String!, reviewType: XmlReviewType!): Boolean!
}

enum Rights {
  Author
  ExecutiveEditor
  Reviewer
}

type User {
  affiliation: String
  email: String!
  name: String!
  rights: Rights!
  username: String!
}

input UserInput {
  affiliation: String
  email: String!
  name: String!
  password: String!
  passwordRepeat: String!
  username: String!
}

enum XmlReviewType {
  FirstXmlReview
  SecondXmlReview
}