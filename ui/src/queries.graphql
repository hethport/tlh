# Common fragments

fragment ManuscriptIdentifier on ManuscriptIdentifier {
  identifierType
  identifier
}

# /

fragment ManuscriptBasicData on ManuscriptMetaData {
  mainIdentifier {
    ...ManuscriptIdentifier
  }
  status
  creatorUsername
}

fragment ReviewerHomeData on Reviewer {
  appointments {
    type
    manuscriptIdentifier
    waitingFor
  }
}

fragment ExecutiveEditorHomeData on ExecutiveEditor {
  documentsAwaitingApproval
}

query Index($page: Int! = 0) {
  manuscriptCount
  allManuscripts(page: $page) {
    ...ManuscriptBasicData
  }
  myManuscripts
  reviewerQueries {
    ...ReviewerHomeData
  }
  executiveEditorQueries {
    ...ExecutiveEditorHomeData
  }
}

# /createManuscript

mutation CreateManuscript($manuscriptMetaData : ManuscriptMetaDataInput) {
  identifier: createManuscript(values: $manuscriptMetaData)
}

# /manuscripts/:id

fragment ManuscriptMetaData on ManuscriptMetaData {
  mainIdentifier {
    ...ManuscriptIdentifier
  }
  otherIdentifiers {
    ...ManuscriptIdentifier
  }
  defaultLanguage
  bibliography
  cthClassification
  palaeographicClassification
  palaeographicClassificationSure
  provenance
  creatorUsername
  status
  pictureUrls
  provisionalTransliteration
  transliterationReleased
}

query Manuscript($mainIdentifier: String!) {
  manuscript(mainIdentifier: $mainIdentifier) {
    ...ManuscriptMetaData
  }
}

mutation ReleaseTransliteration($mainIdentifier: String!) {
  manuscript(mainIdentifier: $mainIdentifier) {
    releaseTransliteration
  }
}

# /manuscripts/:id/uploadPictures

fragment ManuscriptIdentWithCreator on ManuscriptMetaData {
  mainIdentifier {
    ...ManuscriptIdentifier
  }
  pictureUrls
  creatorUsername
}

query UploadPictures($mainIdentifier: String!) {
  manuscript(mainIdentifier: $mainIdentifier) {
    ...ManuscriptIdentWithCreator
  }
}

mutation DeletePicture($mainIdentifier: String!, $pictureName: String!) {
  manuscript(mainIdentifier: $mainIdentifier) {
    deletePicture(pictureName: $pictureName)
  }
}

# /manuscripts/:id/transliterationInput

fragment TransliterationInputData on ManuscriptMetaData {
  mainIdentifier {
    ...ManuscriptIdentifier
  }
  provisionalTransliteration
  status
  creatorUsername
}

query TransliterationInput($mainIdentifier: String!) {
  manuscript(mainIdentifier: $mainIdentifier) {
    ...TransliterationInputData
  }
}

mutation uploadTransliteration($mainIdentifier: String!, $input: String!) {
  manuscript(mainIdentifier: $mainIdentifier) {
    updateTransliteration(input: $input)
  }
}

# /manuscripts/:id/reviewTransliteration

query ReviewTransliteration($mainIdentifier: String!) {
  manuscript(mainIdentifier: $mainIdentifier) {
    status
    transliterationReviewData
  }
}

mutation SubmitTransliterationReview($mainIdentifier: String!, $review: String!) {
  reviewerMutations {
    submitTransliterationReview(mainIdentifier: $mainIdentifier, review: $review)
  }
}

# /manuscripts/:id/xmlConversion

# TODO: data for xml header...
query XmlConversion($mainIdentifier: String!) {
  manuscript(mainIdentifier: $mainIdentifier) {
    mainIdentifier {
      mainIdentifierType: identifierType
    }
    status
    xmlConversionData
    transliterationReleaseDate
  }
}

mutation SubmitXmlConversion($mainIdentifier: String!, $conversion: String!) {
  reviewerMutations {
    submitXmlConversion(mainIdentifier: $mainIdentifier,conversion: $conversion)
  }
}

# /manuscripts/:id/firstXmlReview, /manuscripts/:id/secondXmlReview

query XmlReview($mainIdentifier: String!, $reviewType: XmlReviewType!) {
  manuscript(mainIdentifier: $mainIdentifier) {
    xmlReviewData(reviewType: $reviewType)
  }
}

mutation SubmitXmlReview($mainIdentifier: String!, $review: String!, $reviewType: XmlReviewType!) {
  reviewerMutations {
    submitXmlReview(mainIdentifier: $mainIdentifier, review: $review, reviewType: $reviewType)
  }
}

# /manuscripts/:id/approveDocument

query Approval($mainIdentifier: String!) {
  executiveEditorQueries {
    __typename
    documentAwaitingApproval(mainIdentifier: $mainIdentifier)
  }
}

mutation SubmitApproval($mainIdentifier: String!, $input: String!) {
  executiveEditor {
    submitApproval(manuscriptIdentifier: $mainIdentifier, input: $input)
  }
}

# /pipelineOverview

fragment DocumentInPipeline on DocumentInPipeline {
  manuscriptIdentifier
  author
  appointedTransliterationReviewer
  transliterationReviewDateString
  appointedXmlConverter
  xmlConversionDateString,
  appointedFirstXmlReviewer
  firstXmlReviewDateString
  appointedSecondXmlReviewer
  secondXmlReviewDateString
}

fragment PipelineOverview on ExecutiveEditor {
  allReviewers
  documentsInPipeline(page: $page) {
    ...DocumentInPipeline
  }
}

query PipelineOverview($page: Int) {
  executiveEditorQueries {
    ...PipelineOverview
  }
}

mutation AppointTransliterationReviewer($manuscriptIdentifier: String!, $reviewer: String!) {
  executiveEditor {
    appointTransliterationReviewer(manuscriptIdentifier: $manuscriptIdentifier, reviewer: $reviewer)
  }
}

mutation AppointXmlConverter($manuscriptIdentifier: String!, $converter: String!) {
  executiveEditor {
    appointXmlConverter(manuscriptIdentifier: $manuscriptIdentifier, converter: $converter)
  }
}

mutation AppointFirstXmlReviewer($manuscriptIdentifier: String!, $reviewer: String!) {
  executiveEditor {
    appointFirstXmlReviewer(manuscriptIdentifier: $manuscriptIdentifier, reviewer: $reviewer)
  }
}

mutation AppointSecondXmlReviewer($manuscriptIdentifier: String!, $reviewer: String!) {
  executiveEditor {
    appointSecondXmlReviewer(manuscriptIdentifier: $manuscriptIdentifier, reviewer: $reviewer)
  }
}
